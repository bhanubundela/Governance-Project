Project: 

"AWS Ninja" is a governance project that uses Lambda functions to optimize and manage AWS resources. 
With AWS Ninja, you can easily govern your AWS resources, automate compliance checks, and enforce policies.
Tech Used: EC2(EBS), IAM, Lambda, CloudWatch, Python(boto3)

Project scope: To secured S3 buckets: Lambda functions can be used to monitor S3 bucket access and enforce security policies, 
such as preventing public access.

Implmentation Steps:

1. Created basic python lambda function with basic role


2. Created trigger event to monitor EBS volume under cloudwatch rules


3. Added lambda (function created in step 1) in cloudwatch rules targets


3. Write python code using boto3 in lambda function

import boto3

def get_volume_id_from_arn(volume_arn):
    arn_parts = volume_arn.split(':')
    volume_id = arn_parts[-1].split('/')[-1]
    return volume_id
    
def lambda_handler(event, context):
    
    
    volume_arn = event['resources'][0] 
    volume_id = get_volume_id_from_arn(volume_arn)
    
    ec2_client = boto3.client('ec2')
    
    response = ec2_client.modify_volume(
        
        VolumeId = volume_id,
        VolumeType = 'gp3',
    
)


4. Grant permission to IAM role (Created in step 1) to access EBS volume: 
CREATED INLINE POLICY---->>>> CHOOSE SERVICES--> EC2, ACTION-->  MODIFY VOLUME

Note: Convert the event data into json format from cloudwatch logs




Here is the code:
